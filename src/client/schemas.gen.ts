// This file is auto-generated by @hey-api/openapi-ts

export const TypesenseCollectionNameSchema = {
    type: 'string',
    enum: ['user']
} as const;

export const SetUserRolesCommandSchema = {
    type: 'object',
    properties: {
        roleUuids: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    },
    required: ['roleUuids']
} as const;

export const PermissionSchema = {
    type: 'string',
    enum: ['admin', 'read_only', 'user.read', 'user.create', 'user.update', 'user.delete', 'role.read', 'role.create', 'role.update', 'role.delete', 'contact.create', 'contact.read', 'contact.update', 'contact.delete']
} as const;

export const RoleResponseSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: 'string'
        },
        name: {
            type: 'string'
        },
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Permission'
            }
        }
    },
    required: ['uuid', 'createdAt', 'updatedAt', 'name', 'permissions']
} as const;

export const ViewMeResponseSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        email: {
            type: 'string',
            format: 'email'
        },
        firstName: {
            type: 'string',
            nullable: true,
            example: 'John'
        },
        lastName: {
            type: 'string',
            nullable: true,
            example: 'Doe'
        },
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleResponse'
            }
        }
    },
    required: ['uuid', 'email', 'firstName', 'lastName', 'roles']
} as const;

export const ViewUserResponseSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        email: {
            type: 'string',
            format: 'email'
        },
        firstName: {
            type: 'string',
            nullable: true,
            example: 'John'
        },
        lastName: {
            type: 'string',
            nullable: true,
            example: 'Doe'
        },
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleResponse'
            }
        }
    },
    required: ['uuid', 'email', 'firstName', 'lastName', 'roles']
} as const;

export const PaginatedOffsetQuerySchema = {
    type: 'object',
    properties: {
        limit: {
            type: 'number',
            minimum: 1,
            maximum: 100
        },
        offset: {
            type: 'number',
            minimum: 0
        }
    },
    required: ['limit', 'offset']
} as const;

export const UsersFilterQuerySchema = {
    type: 'object',
    properties: {
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Permission'
            }
        }
    }
} as const;

export const UserIndexViewSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        email: {
            type: 'string',
            format: 'email'
        },
        firstName: {
            type: 'string',
            nullable: true,
            example: 'John'
        },
        lastName: {
            type: 'string',
            nullable: true,
            example: 'Doe'
        }
    },
    required: ['uuid', 'email', 'firstName', 'lastName']
} as const;

export const PaginatedOffsetResponseMetaSchema = {
    type: 'object',
    properties: {
        total: {
            type: 'number'
        },
        offset: {
            type: 'number'
        },
        limit: {
            type: 'number'
        }
    },
    required: ['total', 'offset', 'limit']
} as const;

export const ViewUsersResponseSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserIndexView'
            }
        },
        meta: {
            '$ref': '#/components/schemas/PaginatedOffsetResponseMeta'
        }
    },
    required: ['items', 'meta']
} as const;

export const CreateRoleCommandSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        }
    },
    required: ['name']
} as const;

export const PermissionObjectSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        actions: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['id', 'actions']
} as const;

export const UpdateRolesBulkRoleCommandSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PermissionObject'
            }
        }
    },
    required: ['uuid', 'name', 'permissions']
} as const;

export const UpdateRolesBulkCommandSchema = {
    type: 'object',
    properties: {
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UpdateRolesBulkRoleCommand'
            }
        }
    },
    required: ['roles']
} as const;

export const UpdateRoleCommandSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        }
    },
    required: ['name']
} as const;

export const ViewRoleIndexResponseSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RoleResponse'
            }
        }
    },
    required: ['items']
} as const;

export const MimeTypeSchema = {
    type: 'string',
    enum: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'text/html', 'image/jpeg', 'image/png', 'image/tiff', 'image/bmp', 'image/heic', 'image/webp', 'image/gif']
} as const;

export const CreateFileDtoSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        mimeType: {
            allOf: [
                {
                    '$ref': '#/components/schemas/MimeType'
                }
            ]
        }
    },
    required: ['name', 'mimeType']
} as const;

export const CreateFileResponseSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        mimeType: {
            nullable: true,
            allOf: [
                {
                    '$ref': '#/components/schemas/MimeType'
                }
            ]
        },
        uploadUrl: {
            type: 'string'
        }
    },
    required: ['uuid', 'name', 'mimeType', 'uploadUrl']
} as const;

export const CreateContactCommandSchema = {
    type: 'object',
    properties: {
        firstName: {
            type: 'string',
            nullable: true,
            example: 'John'
        },
        lastName: {
            type: 'string',
            nullable: true,
            example: 'Doe'
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        phone: {
            type: 'string',
            pattern: '^[+]?[(]?[0-9]{3}[)]?[-s.]?[0-9]{3}[-s.]?[0-9]{4,6}$',
            nullable: true,
            example: '+32473301974'
        }
    },
    required: ['firstName', 'lastName', 'email', 'phone']
} as const;

export const CreateContactResponseSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        isActive: {
            type: 'boolean'
        },
        firstName: {
            type: 'string',
            nullable: true,
            example: 'John'
        },
        lastName: {
            type: 'string',
            nullable: true,
            example: 'Doe'
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        phone: {
            type: 'string',
            pattern: '^[+]?[(]?[0-9]{3}[)]?[-s.]?[0-9]{3}[-s.]?[0-9]{4,6}$',
            nullable: true
        }
    },
    required: ['uuid', 'createdAt', 'updatedAt', 'isActive', 'firstName', 'lastName', 'email', 'phone']
} as const;

export const UpdateContactCommandSchema = {
    type: 'object',
    properties: {
        firstName: {
            type: 'string',
            nullable: true,
            example: 'John'
        },
        lastName: {
            type: 'string',
            nullable: true,
            example: 'Doe'
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        phone: {
            type: 'string',
            pattern: '^[+]?[(]?[0-9]{3}[)]?[-s.]?[0-9]{3}[-s.]?[0-9]{4,6}$',
            nullable: true,
            example: '+32473301974'
        },
        isActive: {
            type: 'boolean'
        }
    },
    required: ['firstName', 'lastName', 'email', 'phone', 'isActive']
} as const;

export const ViewContactDetailResponseSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        isActive: {
            type: 'boolean'
        },
        firstName: {
            type: 'string',
            nullable: true,
            example: 'John'
        },
        lastName: {
            type: 'string',
            nullable: true,
            example: 'Doe'
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        phone: {
            type: 'string',
            pattern: '^[+]?[(]?[0-9]{3}[)]?[-s.]?[0-9]{3}[-s.]?[0-9]{4,6}$',
            nullable: true
        }
    },
    required: ['uuid', 'createdAt', 'updatedAt', 'isActive', 'firstName', 'lastName', 'email', 'phone']
} as const;

export const ViewContactIndexFilterQuerySchema = {
    type: 'object',
    properties: {
        isActive: {
            type: 'string'
        }
    }
} as const;

export const ContactResponseSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        isActive: {
            type: 'boolean'
        },
        firstName: {
            type: 'string',
            nullable: true,
            example: 'John'
        },
        lastName: {
            type: 'string',
            nullable: true,
            example: 'Doe'
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        phone: {
            type: 'string',
            pattern: '^[+]?[(]?[0-9]{3}[)]?[-s.]?[0-9]{3}[-s.]?[0-9]{4,6}$',
            nullable: true
        }
    },
    required: ['uuid', 'createdAt', 'updatedAt', 'isActive', 'firstName', 'lastName', 'email', 'phone']
} as const;

export const ViewContactIndexResponseSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ContactResponse'
            }
        },
        meta: {
            '$ref': '#/components/schemas/PaginatedOffsetResponseMeta'
        }
    },
    required: ['items', 'meta']
} as const;

export const ThemeSchema = {
    type: 'string',
    enum: ['light', 'dark', 'system']
} as const;

export const UpdatePreferencesCommandSchema = {
    type: 'object',
    properties: {
        theme: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Theme'
                }
            ]
        },
        language: {
            type: 'string',
            example: 'en'
        },
        fontSize: {
            type: 'string',
            example: 'default'
        },
        showShortcuts: {
            type: 'boolean',
            example: false
        },
        reduceMotion: {
            type: 'boolean',
            example: false
        },
        highContrast: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const ViewPreferencesResponseSchema = {
    type: 'object',
    properties: {
        theme: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Theme'
                }
            ]
        },
        language: {
            type: 'string',
            nullable: true
        },
        fontSize: {
            type: 'string',
            nullable: true
        },
        showShortcuts: {
            type: 'boolean'
        },
        reduceMotion: {
            type: 'boolean'
        },
        highContrast: {
            type: 'boolean'
        }
    },
    required: ['theme', 'language', 'fontSize', 'showShortcuts', 'reduceMotion', 'highContrast']
} as const;