// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { SwaggerControllerHandleRedirectData, StatusControllerGetApiStatusData, StatusControllerGetHealthStatusData, SetUserRolesControllerUpdateUserV1Data, ViewMeControllerViewMeV1Data, ViewMeControllerViewMeV1Response, ViewUserControllerViewUserV1Data, ViewUserControllerViewUserV1Response, ViewUsersControllerViewUserV1Data, ViewUsersControllerViewUserV1Response, TypesenseControllerMigrateV1Data, TypesenseControllerImportV1Data, TypesenseControllerGetCollectionsV1Data, ViewRolesControllerGetRolesV1Data, ViewRolesControllerGetRolesV1Response, CreateRoleControllerCreateRoleV1Data, DeleteRoleControllerDeleteRoleV1Data, ViewRoleControllerGetRoleV1Data, ViewRoleControllerGetRoleV1Response, UpdateRoleControllerUpdateRoleV1Data, UpdateRolesBulkControllerUpdateRolesBulkV1Data, PermissionControllerGetPermissionsV1Data, FileControllerCreateFileV1Data, FileControllerCreateFileV1Response, FileControllerConfirmFileUploadV1Data, FileControllerDownloadFileV1Data, FileControllerRemoveFileV1Data, ViewContactIndexControllerViewContactIndexV1Data, ViewContactIndexControllerViewContactIndexV1Response, CreateContactControllerCreateContactV1Data, CreateContactControllerCreateContactV1Response, DeleteContactControllerDeleteContactV1Data, ViewContactDetailControllerViewContactDetailV1Data, ViewContactDetailControllerViewContactDetailV1Response, UpdateContactControllerUpdateContactV1Data } from './types.gen';

export const client = createClient(createConfig());

export const swaggerControllerHandleRedirect = <ThrowOnError extends boolean = false>(options?: Options<SwaggerControllerHandleRedirectData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/oauth2-redirect'
    });
};

export const statusControllerGetApiStatus = <ThrowOnError extends boolean = false>(options?: Options<StatusControllerGetApiStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api'
    });
};

export const statusControllerGetHealthStatus = <ThrowOnError extends boolean = false>(options?: Options<StatusControllerGetHealthStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/health'
    });
};

export const setUserRolesControllerUpdateUserV1 = <ThrowOnError extends boolean = false>(options: Options<SetUserRolesControllerUpdateUserV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/users/{user}/role'
    });
};

export const viewMeControllerViewMeV1 = <ThrowOnError extends boolean = false>(options?: Options<ViewMeControllerViewMeV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewMeControllerViewMeV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

export const viewUserControllerViewUserV1 = <ThrowOnError extends boolean = false>(options: Options<ViewUserControllerViewUserV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewUserControllerViewUserV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{uuid}'
    });
};

export const viewUsersControllerViewUserV1 = <ThrowOnError extends boolean = false>(options: Options<ViewUsersControllerViewUserV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewUsersControllerViewUserV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/users'
    });
};

export const typesenseControllerMigrateV1 = <ThrowOnError extends boolean = false>(options?: Options<TypesenseControllerMigrateV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/typesense/migrate'
    });
};

export const typesenseControllerImportV1 = <ThrowOnError extends boolean = false>(options?: Options<TypesenseControllerImportV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/typesense/import'
    });
};

export const typesenseControllerGetCollectionsV1 = <ThrowOnError extends boolean = false>(options?: Options<TypesenseControllerGetCollectionsV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/typesense/collections'
    });
};

export const viewRolesControllerGetRolesV1 = <ThrowOnError extends boolean = false>(options?: Options<ViewRolesControllerGetRolesV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewRolesControllerGetRolesV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/roles'
    });
};

export const createRoleControllerCreateRoleV1 = <ThrowOnError extends boolean = false>(options: Options<CreateRoleControllerCreateRoleV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/roles'
    });
};

export const deleteRoleControllerDeleteRoleV1 = <ThrowOnError extends boolean = false>(options: Options<DeleteRoleControllerDeleteRoleV1Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/roles/{role}'
    });
};

export const viewRoleControllerGetRoleV1 = <ThrowOnError extends boolean = false>(options: Options<ViewRoleControllerGetRoleV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewRoleControllerGetRoleV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/roles/{role}'
    });
};

export const updateRoleControllerUpdateRoleV1 = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleControllerUpdateRoleV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/roles/{role}'
    });
};

export const updateRolesBulkControllerUpdateRolesBulkV1 = <ThrowOnError extends boolean = false>(options: Options<UpdateRolesBulkControllerUpdateRolesBulkV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/roles/bulk'
    });
};

export const permissionControllerGetPermissionsV1 = <ThrowOnError extends boolean = false>(options?: Options<PermissionControllerGetPermissionsV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/permissions'
    });
};

export const fileControllerCreateFileV1 = <ThrowOnError extends boolean = false>(options: Options<FileControllerCreateFileV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<FileControllerCreateFileV1Response, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/file'
    });
};

export const fileControllerConfirmFileUploadV1 = <ThrowOnError extends boolean = false>(options: Options<FileControllerConfirmFileUploadV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/file/{file}/confirm-upload'
    });
};

export const fileControllerDownloadFileV1 = <ThrowOnError extends boolean = false>(options: Options<FileControllerDownloadFileV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/file/{file}/download'
    });
};

export const fileControllerRemoveFileV1 = <ThrowOnError extends boolean = false>(options: Options<FileControllerRemoveFileV1Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/file/{file}'
    });
};

export const viewContactIndexControllerViewContactIndexV1 = <ThrowOnError extends boolean = false>(options?: Options<ViewContactIndexControllerViewContactIndexV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewContactIndexControllerViewContactIndexV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/contacts'
    });
};

export const createContactControllerCreateContactV1 = <ThrowOnError extends boolean = false>(options: Options<CreateContactControllerCreateContactV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateContactControllerCreateContactV1Response, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/contacts'
    });
};

export const deleteContactControllerDeleteContactV1 = <ThrowOnError extends boolean = false>(options: Options<DeleteContactControllerDeleteContactV1Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/contacts/{uuid}'
    });
};

export const viewContactDetailControllerViewContactDetailV1 = <ThrowOnError extends boolean = false>(options: Options<ViewContactDetailControllerViewContactDetailV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewContactDetailControllerViewContactDetailV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/contacts/{uuid}'
    });
};

export const updateContactControllerUpdateContactV1 = <ThrowOnError extends boolean = false>(options: Options<UpdateContactControllerUpdateContactV1Data, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/contacts/{uuid}'
    });
};