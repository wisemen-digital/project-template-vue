// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { ChangeUserRoleControllerUpdateUserV1Data, ViewUserControllerViewUserV1Data, ViewUserControllerViewUserV1Response, ViewUsersControllerViewUserV1Data, ViewUsersControllerViewUserV1Response, RoleControllerGetRolesV1Data, RoleControllerGetRolesV1Response, RoleControllerCreateRoleV1Data, RoleControllerCreateRoleV1Response, RoleControllerUpdateRolesBulkV1Data, RoleControllerUpdateRolesBulkV1Response, RoleControllerDeleteRoleV1Data, RoleControllerGetRoleV1Data, RoleControllerGetRoleV1Response, RoleControllerUpdateRoleV1Data, RoleControllerUpdateRoleV1Response, RoleControllerGetRoleCountV1Data, RoleControllerGetRoleCountV1Response, PermissionControllerGetPermissionsV1Data, TypesenseControllerMigrateV1Data, TypesenseControllerImportV1Data, TypesenseControllerGetCollectionsV1Data, FileControllerCreateFileV1Data, FileControllerCreateFileV1Response, FileControllerConfirmFileUploadV1Data, FileControllerDownloadFileV1Data, FileControllerRemoveFileV1Data, StatusControllerGetApiStatusData, StatusControllerGetHealthStatusData, ViewContactIndexControllerViewContactIndexV1Data, ViewContactIndexControllerViewContactIndexV1Response, CreateContactControllerCreateContactV1Data, CreateContactControllerCreateContactV1Response, DeleteContactControllerDeleteContactV1Data, ViewContactDetailControllerViewContactDetailV1Data, ViewContactDetailControllerViewContactDetailV1Response, UpdateContactControllerUpdateContactV1Data } from './types.gen';

export const client = createClient(createConfig());

export const changeUserRoleControllerUpdateUserV1 = <ThrowOnError extends boolean = false>(options: Options<ChangeUserRoleControllerUpdateUserV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/users/{user}/role'
    });
};

export const viewUserControllerViewUserV1 = <ThrowOnError extends boolean = false>(options: Options<ViewUserControllerViewUserV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewUserControllerViewUserV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{user}'
    });
};

export const viewUsersControllerViewUserV1 = <ThrowOnError extends boolean = false>(options: Options<ViewUsersControllerViewUserV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewUsersControllerViewUserV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/users'
    });
};

export const roleControllerGetRolesV1 = <ThrowOnError extends boolean = false>(options?: Options<RoleControllerGetRolesV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<RoleControllerGetRolesV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/roles'
    });
};

export const roleControllerCreateRoleV1 = <ThrowOnError extends boolean = false>(options: Options<RoleControllerCreateRoleV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<RoleControllerCreateRoleV1Response, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/roles'
    });
};

export const roleControllerUpdateRolesBulkV1 = <ThrowOnError extends boolean = false>(options: Options<RoleControllerUpdateRolesBulkV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<RoleControllerUpdateRolesBulkV1Response, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/roles/bulk'
    });
};

export const roleControllerDeleteRoleV1 = <ThrowOnError extends boolean = false>(options: Options<RoleControllerDeleteRoleV1Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/roles/{role}'
    });
};

export const roleControllerGetRoleV1 = <ThrowOnError extends boolean = false>(options: Options<RoleControllerGetRoleV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<RoleControllerGetRoleV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/roles/{role}'
    });
};

export const roleControllerUpdateRoleV1 = <ThrowOnError extends boolean = false>(options: Options<RoleControllerUpdateRoleV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<RoleControllerUpdateRoleV1Response, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/roles/{role}'
    });
};

export const roleControllerGetRoleCountV1 = <ThrowOnError extends boolean = false>(options: Options<RoleControllerGetRoleCountV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<RoleControllerGetRoleCountV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/roles/{role}/count'
    });
};

export const permissionControllerGetPermissionsV1 = <ThrowOnError extends boolean = false>(options?: Options<PermissionControllerGetPermissionsV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/permissions'
    });
};

export const typesenseControllerMigrateV1 = <ThrowOnError extends boolean = false>(options?: Options<TypesenseControllerMigrateV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/typesense/migrate'
    });
};

export const typesenseControllerImportV1 = <ThrowOnError extends boolean = false>(options?: Options<TypesenseControllerImportV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/typesense/import'
    });
};

export const typesenseControllerGetCollectionsV1 = <ThrowOnError extends boolean = false>(options?: Options<TypesenseControllerGetCollectionsV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/typesense/collections'
    });
};

export const fileControllerCreateFileV1 = <ThrowOnError extends boolean = false>(options: Options<FileControllerCreateFileV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<FileControllerCreateFileV1Response, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/file'
    });
};

export const fileControllerConfirmFileUploadV1 = <ThrowOnError extends boolean = false>(options: Options<FileControllerConfirmFileUploadV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/file/{file}/confirm-upload'
    });
};

export const fileControllerDownloadFileV1 = <ThrowOnError extends boolean = false>(options: Options<FileControllerDownloadFileV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/file/{file}/download'
    });
};

export const fileControllerRemoveFileV1 = <ThrowOnError extends boolean = false>(options: Options<FileControllerRemoveFileV1Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/file/{file}'
    });
};

export const statusControllerGetApiStatus = <ThrowOnError extends boolean = false>(options?: Options<StatusControllerGetApiStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api'
    });
};

export const statusControllerGetHealthStatus = <ThrowOnError extends boolean = false>(options?: Options<StatusControllerGetHealthStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/health'
    });
};

export const viewContactIndexControllerViewContactIndexV1 = <ThrowOnError extends boolean = false>(options?: Options<ViewContactIndexControllerViewContactIndexV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewContactIndexControllerViewContactIndexV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/contacts'
    });
};

export const createContactControllerCreateContactV1 = <ThrowOnError extends boolean = false>(options: Options<CreateContactControllerCreateContactV1Data, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateContactControllerCreateContactV1Response, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/contacts'
    });
};

export const deleteContactControllerDeleteContactV1 = <ThrowOnError extends boolean = false>(options: Options<DeleteContactControllerDeleteContactV1Data, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/contacts/{uuid}'
    });
};

export const viewContactDetailControllerViewContactDetailV1 = <ThrowOnError extends boolean = false>(options: Options<ViewContactDetailControllerViewContactDetailV1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ViewContactDetailControllerViewContactDetailV1Response, unknown, ThrowOnError>({
        ...options,
        url: '/api/v1/contacts/{uuid}'
    });
};

export const updateContactControllerUpdateContactV1 = <ThrowOnError extends boolean = false>(options: Options<UpdateContactControllerUpdateContactV1Data, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/api/v1/contacts/{uuid}'
    });
};