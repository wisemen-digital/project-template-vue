// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { ChangeUserRoleControllerUpdateUserData, ChangeUserRoleControllerUpdateUserError, ChangeUserRoleControllerUpdateUserResponse, ViewUserControllerViewUserData, ViewUserControllerViewUserError, ViewUserControllerViewUserResponse, ViewUsersControllerViewUserData, ViewUsersControllerViewUserError, ViewUsersControllerViewUserResponse, RoleControllerGetRolesError, RoleControllerGetRolesResponse, RoleControllerCreateRoleData, RoleControllerCreateRoleError, RoleControllerCreateRoleResponse, RoleControllerUpdateRolesBulkData, RoleControllerUpdateRolesBulkError, RoleControllerUpdateRolesBulkResponse, RoleControllerGetRoleData, RoleControllerGetRoleError, RoleControllerGetRoleResponse, RoleControllerUpdateRoleData, RoleControllerUpdateRoleError, RoleControllerUpdateRoleResponse, RoleControllerDeleteRoleData, RoleControllerDeleteRoleError, RoleControllerDeleteRoleResponse, RoleControllerGetRoleCountData, RoleControllerGetRoleCountError, RoleControllerGetRoleCountResponse, PermissionControllerGetPermissionsError, PermissionControllerGetPermissionsResponse, TypesenseControllerMigrateData, TypesenseControllerMigrateError, TypesenseControllerMigrateResponse, TypesenseControllerImportData, TypesenseControllerImportError, TypesenseControllerImportResponse, TypesenseControllerGetCollectionsError, TypesenseControllerGetCollectionsResponse, FileControllerCreateFileData, FileControllerCreateFileError, FileControllerCreateFileResponse, FileControllerConfirmFileUploadData, FileControllerConfirmFileUploadError, FileControllerConfirmFileUploadResponse, FileControllerDownloadFileData, FileControllerRemoveFileData, FileControllerRemoveFileError, FileControllerRemoveFileResponse, StatusControllerGetApiStatusError, StatusControllerGetApiStatusResponse, StatusControllerGetHealthStatusError, StatusControllerGetHealthStatusResponse } from './types.gen';

export const client = createClient(createConfig());

export const changeUserRoleControllerUpdateUser = <ThrowOnError extends boolean = false>(options: Options<ChangeUserRoleControllerUpdateUserData, ThrowOnError>) => { return (options?.client ?? client).post<ChangeUserRoleControllerUpdateUserResponse, ChangeUserRoleControllerUpdateUserError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/{user}/role'
}); };

export const viewUserControllerViewUser = <ThrowOnError extends boolean = false>(options: Options<ViewUserControllerViewUserData, ThrowOnError>) => { return (options?.client ?? client).get<ViewUserControllerViewUserResponse, ViewUserControllerViewUserError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/{user}'
}); };

export const viewUsersControllerViewUser = <ThrowOnError extends boolean = false>(options: Options<ViewUsersControllerViewUserData, ThrowOnError>) => { return (options?.client ?? client).get<ViewUsersControllerViewUserResponse, ViewUsersControllerViewUserError, ThrowOnError>({
    ...options,
    url: '/api/v1/users'
}); };

export const roleControllerGetRoles = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<RoleControllerGetRolesResponse, RoleControllerGetRolesError, ThrowOnError>({
    ...options,
    url: '/api/v1/roles'
}); };

export const roleControllerCreateRole = <ThrowOnError extends boolean = false>(options: Options<RoleControllerCreateRoleData, ThrowOnError>) => { return (options?.client ?? client).post<RoleControllerCreateRoleResponse, RoleControllerCreateRoleError, ThrowOnError>({
    ...options,
    url: '/api/v1/roles'
}); };

export const roleControllerUpdateRolesBulk = <ThrowOnError extends boolean = false>(options: Options<RoleControllerUpdateRolesBulkData, ThrowOnError>) => { return (options?.client ?? client).post<RoleControllerUpdateRolesBulkResponse, RoleControllerUpdateRolesBulkError, ThrowOnError>({
    ...options,
    url: '/api/v1/roles/bulk'
}); };

export const roleControllerGetRole = <ThrowOnError extends boolean = false>(options: Options<RoleControllerGetRoleData, ThrowOnError>) => { return (options?.client ?? client).get<RoleControllerGetRoleResponse, RoleControllerGetRoleError, ThrowOnError>({
    ...options,
    url: '/api/v1/roles/{role}'
}); };

export const roleControllerUpdateRole = <ThrowOnError extends boolean = false>(options: Options<RoleControllerUpdateRoleData, ThrowOnError>) => { return (options?.client ?? client).post<RoleControllerUpdateRoleResponse, RoleControllerUpdateRoleError, ThrowOnError>({
    ...options,
    url: '/api/v1/roles/{role}'
}); };

export const roleControllerDeleteRole = <ThrowOnError extends boolean = false>(options: Options<RoleControllerDeleteRoleData, ThrowOnError>) => { return (options?.client ?? client).delete<RoleControllerDeleteRoleResponse, RoleControllerDeleteRoleError, ThrowOnError>({
    ...options,
    url: '/api/v1/roles/{role}'
}); };

export const roleControllerGetRoleCount = <ThrowOnError extends boolean = false>(options: Options<RoleControllerGetRoleCountData, ThrowOnError>) => { return (options?.client ?? client).post<RoleControllerGetRoleCountResponse, RoleControllerGetRoleCountError, ThrowOnError>({
    ...options,
    url: '/api/v1/roles/{role}/count'
}); };

export const permissionControllerGetPermissions = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<PermissionControllerGetPermissionsResponse, PermissionControllerGetPermissionsError, ThrowOnError>({
    ...options,
    url: '/api/v1/permissions'
}); };

export const typesenseControllerMigrate = <ThrowOnError extends boolean = false>(options?: Options<TypesenseControllerMigrateData, ThrowOnError>) => { return (options?.client ?? client).get<TypesenseControllerMigrateResponse, TypesenseControllerMigrateError, ThrowOnError>({
    ...options,
    url: '/api/v1/typesense/migrate'
}); };

export const typesenseControllerImport = <ThrowOnError extends boolean = false>(options?: Options<TypesenseControllerImportData, ThrowOnError>) => { return (options?.client ?? client).get<TypesenseControllerImportResponse, TypesenseControllerImportError, ThrowOnError>({
    ...options,
    url: '/api/v1/typesense/import'
}); };

export const typesenseControllerGetCollections = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<TypesenseControllerGetCollectionsResponse, TypesenseControllerGetCollectionsError, ThrowOnError>({
    ...options,
    url: '/api/v1/typesense/collections'
}); };

export const fileControllerCreateFile = <ThrowOnError extends boolean = false>(options: Options<FileControllerCreateFileData, ThrowOnError>) => { return (options?.client ?? client).post<FileControllerCreateFileResponse, FileControllerCreateFileError, ThrowOnError>({
    ...options,
    url: '/api/v1/file'
}); };

export const fileControllerConfirmFileUpload = <ThrowOnError extends boolean = false>(options: Options<FileControllerConfirmFileUploadData, ThrowOnError>) => { return (options?.client ?? client).post<FileControllerConfirmFileUploadResponse, FileControllerConfirmFileUploadError, ThrowOnError>({
    ...options,
    url: '/api/v1/file/{file}/confirm-upload'
}); };

export const fileControllerDownloadFile = <ThrowOnError extends boolean = false>(options: Options<FileControllerDownloadFileData, ThrowOnError>) => { return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/api/v1/file/{file}/download'
}); };

export const fileControllerRemoveFile = <ThrowOnError extends boolean = false>(options: Options<FileControllerRemoveFileData, ThrowOnError>) => { return (options?.client ?? client).delete<FileControllerRemoveFileResponse, FileControllerRemoveFileError, ThrowOnError>({
    ...options,
    url: '/api/v1/file/{file}'
}); };

export const statusControllerGetApiStatus = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<StatusControllerGetApiStatusResponse, StatusControllerGetApiStatusError, ThrowOnError>({
    ...options,
    url: '/api'
}); };

export const statusControllerGetHealthStatus = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<StatusControllerGetHealthStatusResponse, StatusControllerGetHealthStatusError, ThrowOnError>({
    ...options,
    url: '/api/health'
}); };