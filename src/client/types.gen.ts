// This file is auto-generated by @hey-api/openapi-ts

export interface PasswordGrantBody {
  client_id: string
  client_secret: string
  grant_type: string
  password: string
  username: string
}

export interface RefreshGrantBody {
  client_id: string
  client_secret: string
  grant_type: string
  refresh_token: string
}

export interface TokenResponse {
  access_token: string
  expires_in: number
  refresh_token: string
  token_type: string
}

export interface RoleTransformerType {
  uuid: string
  createdAt: string
  updatedAt: string
  name: string
  permissions: Array<('admin' | 'read_only' | 'role.create' | 'role.delete' | 'role.read' | 'role.update' | 'user.create' | 'user.delete' | 'user.read' | 'user.update')>
}

export interface UserTransformerType {
  uuid: string
  createdAt: string
  updatedAt: string
  email: string
  firstName: null | string
  lastName: null | string
  role: ((RoleTransformerType) | null)
}

export interface ChangeUserNameCommand {
  firstName?: string
  lastName?: string
}

export interface UserNameChangedResponse {
  uuid: string
  email: string
  firstName: null | string
  lastName: null | string
}

export interface InvalidOldPasswordError {
  code: 'invalid_old_password'
  /**
   * a human-readable explanation specific to this occurrence of the problem
   */
  detail?: string
  status: string
}

export interface ChangePasswordCommand {
  newPassword: string
  oldPassword: string
}

export interface PasswordChangedResponse {
  uuid: string
  email: string
  firstName: null | string
  lastName: null | string
}

export interface ChangeUserRoleCommand {
  roleUuid: string
}

export interface ViewUserResponse {
  uuid: string
  email: string
  firstName: null | string
  lastName: null | string
}

export interface UserIndexView {
  uuid: string
  email: string
  firstName: null | string
  lastName: null | string
}

export interface PaginatedOffsetResponseMeta {
  /**
   * the amount of items per response
   */
  limit: number
  /**
   * the amount of items skipped
   */
  offset: number
  /**
   * the total amount of items that exist
   */
  total: number
}

export interface ViewUsersResponse {
  /**
   * The items for the current page
   */
  items: Array<UserIndexView>
  meta: PaginatedOffsetResponseMeta
}

export interface EmailAlreadyInUseErrorMeta {
  /**
   * the email which is already in use
   */
  email: string
}

export interface EmailAlreadyInUseError {
  code: 'email_already_in_use'
  /**
   * a human-readable explanation specific to this occurrence of the problem
   */
  detail?: string
  status: string
  /**
   * a meta object containing non-standard meta-information about the error
   */
  meta: (EmailAlreadyInUseErrorMeta)
}

export interface RegisterUserCommand {
  email: string
  firstName: null | string
  lastName: null | string
  password: string
}

export interface UserRegisteredResponse {
  uuid: string
  email: string
  firstName: null | string
  lastName: null | string
}

export interface CreateRoleDto {
  /**
   * The name of the role
   */
  name: string
}

export interface PermissionObject {
  id: string
  actions: Array<string>
}

export interface RoleValueDto {
  uuid: string
  permissions: Array<PermissionObject>
}

export interface UpdateRolesBulkDto {
  roles: Array<RoleValueDto>
}

export interface RoleCount {
  /**
   * The count of the roles
   */
  count: number
}

export interface CreateFileDto {
  name: string
  mimeType: 'application/msword' | 'application/pdf' | 'application/vnd.ms-powerpoint' | 'application/vnd.openxmlformats-officedocument.presentationml.presentation' | 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' | 'image/bmp' | 'image/gif' | 'image/heic' | 'image/jpeg' | 'image/png' | 'image/tiff' | 'image/webp' | 'text/html' | 'text/plain'
}

export enum mimeType {
  APPLICATION_MSWORD = 'application/msword',
  APPLICATION_PDF = 'application/pdf',
  APPLICATION_VND_MS_POWERPOINT = 'application/vnd.ms-powerpoint',
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION = 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  IMAGE_BMP = 'image/bmp',
  IMAGE_GIF = 'image/gif',
  IMAGE_HEIC = 'image/heic',
  IMAGE_JPEG = 'image/jpeg',
  IMAGE_PNG = 'image/png',
  IMAGE_TIFF = 'image/tiff',
  IMAGE_WEBP = 'image/webp',
  TEXT_HTML = 'text/html',
  TEXT_PLAIN = 'text/plain',
}

export interface CreateFileResponse {
  uuid: string
  name: string
  mimeType: ('application/msword' | 'application/pdf' | 'application/vnd.ms-powerpoint' | 'application/vnd.openxmlformats-officedocument.presentationml.presentation' | 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' | 'image/bmp' | 'image/gif' | 'image/heic' | 'image/jpeg' | 'image/png' | 'image/tiff' | 'image/webp' | 'text/html' | 'text/plain') | null
  uploadUrl: string
}

export interface AuthControllerCreateTokenData {
  body: (PasswordGrantBody | RefreshGrantBody)
}

export type AuthControllerCreateTokenResponse = (TokenResponse)

export type AuthControllerCreateTokenError = unknown

export type AuthControllerGetUserInfoResponse = (UserTransformerType)

export type AuthControllerGetUserInfoError = unknown

export interface ChangeUserNameControllerUpdateUserData {
  body: ChangeUserNameCommand
  path: {
    user: string
  }
}

export type ChangeUserNameControllerUpdateUserResponse = (UserNameChangedResponse)

export type ChangeUserNameControllerUpdateUserError = unknown

export interface ChangePasswordControllerUpdateUserPasswordData {
  body: ChangePasswordCommand
  path: {
    user: string
  }
}

export type ChangePasswordControllerUpdateUserPasswordResponse = (PasswordChangedResponse)

export interface ChangePasswordControllerUpdateUserPasswordError {
  errors?: Array<(InvalidOldPasswordError)>
}

export interface ChangeUserRoleControllerUpdateUserData {
  body: ChangeUserRoleCommand
  path: {
    user: string
  }
}

export type ChangeUserRoleControllerUpdateUserResponse = (unknown)

export type ChangeUserRoleControllerUpdateUserError = unknown

export interface DeleteUserControllerDeleteUserData {
  path: {
    user: string
  }
}

export type DeleteUserControllerDeleteUserResponse = (unknown)

export type DeleteUserControllerDeleteUserError = unknown

export interface ViewUserControllerViewUserData {
  path: {
    user: string
  }
}

export type ViewUserControllerViewUserResponse = (ViewUserResponse)

export type ViewUserControllerViewUserError = unknown

export interface ViewUsersControllerViewUserData {
  query: {
    limit: number
    offset: number
    permissions?: Array<('admin' | 'read_only' | 'role.create' | 'role.delete' | 'role.read' | 'role.update' | 'user.create' | 'user.delete' | 'user.read' | 'user.update')>
    search?: string
  }
}

export type ViewUsersControllerViewUserResponse = (ViewUsersResponse)

export type ViewUsersControllerViewUserError = unknown

export interface RegisterUserControllerCreateUserData {
  body: RegisterUserCommand
}

export type RegisterUserControllerCreateUserResponse = (UserRegisteredResponse)

export interface RegisterUserControllerCreateUserError {
  errors?: Array<(EmailAlreadyInUseError)>
}

export type RoleControllerGetRolesResponse = (Array<RoleTransformerType>)

export type RoleControllerGetRolesError = unknown

export interface RoleControllerCreateRoleData {
  body: CreateRoleDto
}

export type RoleControllerCreateRoleResponse = (RoleTransformerType)

export type RoleControllerCreateRoleError = unknown

export interface RoleControllerUpdateRolesBulkData {
  body: UpdateRolesBulkDto
}

export type RoleControllerUpdateRolesBulkResponse = (Array<RoleTransformerType>)

export type RoleControllerUpdateRolesBulkError = unknown

export interface RoleControllerGetRoleData {
  path: {
    role: string
  }
}

export type RoleControllerGetRoleResponse = (RoleTransformerType)

export type RoleControllerGetRoleError = unknown

export interface RoleControllerUpdateRoleData {
  body: CreateRoleDto
  path: {
    role: string
  }
}

export type RoleControllerUpdateRoleResponse = (RoleTransformerType)

export type RoleControllerUpdateRoleError = unknown

export interface RoleControllerDeleteRoleData {
  path: {
    role: string
  }
}

export type RoleControllerDeleteRoleResponse = (unknown)

export type RoleControllerDeleteRoleError = unknown

export interface RoleControllerGetRoleCountData {
  path: {
    role: string
  }
}

export type RoleControllerGetRoleCountResponse = (RoleCount)

export type RoleControllerGetRoleCountError = unknown

export type PermissionControllerGetPermissionsResponse = (unknown)

export type PermissionControllerGetPermissionsError = unknown

export interface TypesenseControllerMigrateData {
  query?: {
    collections?: Array<('user')>
    fresh?: boolean
  }
}

export type TypesenseControllerMigrateResponse = (unknown)

export type TypesenseControllerMigrateError = unknown

export interface TypesenseControllerImportData {
  query?: {
    collections?: Array<('user')>
  }
}

export type TypesenseControllerImportResponse = (unknown)

export type TypesenseControllerImportError = unknown

export type TypesenseControllerGetCollectionsResponse = (unknown)

export type TypesenseControllerGetCollectionsError = unknown

export interface FileControllerCreateFileData {
  body: CreateFileDto
}

export type FileControllerCreateFileResponse = (CreateFileResponse)

export type FileControllerCreateFileError = unknown

export interface FileControllerConfirmFileUploadData {
  path: {
    file: string
  }
}

export type FileControllerConfirmFileUploadResponse = (unknown)

export type FileControllerConfirmFileUploadError = unknown

export interface FileControllerDownloadFileData {
  path: {
    file: string
  }
}

export interface FileControllerRemoveFileData {
  path: {
    file: string
  }
}

export type FileControllerRemoveFileResponse = (unknown)

export type FileControllerRemoveFileError = unknown

export type StatusControllerGetApiStatusResponse = (unknown)

export type StatusControllerGetApiStatusError = unknown

export type StatusControllerGetHealthStatusResponse = (unknown)

export type StatusControllerGetHealthStatusError = unknown
