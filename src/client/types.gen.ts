// This file is auto-generated by @hey-api/openapi-ts

export type ChangeUserRoleCommand = {
    roleUuid: string;
};

export type ViewUserResponse = {
    uuid: string;
    email: string;
    firstName: (string) | null;
    lastName: (string) | null;
};

export type UserIndexView = {
    uuid: string;
    email: string;
    firstName: (string) | null;
    lastName: (string) | null;
};

export type PaginatedOffsetResponseMeta = {
    /**
     * the total amount of items that exist
     */
    total: number;
    /**
     * the amount of items skipped
     */
    offset: number;
    /**
     * the amount of items per response
     */
    limit: number;
};

export type ViewUsersResponse = {
    /**
     * The items for the current page
     */
    items: Array<UserIndexView>;
    meta: PaginatedOffsetResponseMeta;
};

export type RoleTransformerType = {
    uuid: string;
    createdAt: string;
    updatedAt: string;
    name: string;
    permissions: Array<('admin' | 'read_only' | 'user.read' | 'user.create' | 'user.update' | 'user.delete' | 'role.read' | 'role.create' | 'role.update' | 'role.delete')>;
};

export type CreateRoleDto = {
    /**
     * The name of the role
     */
    name: string;
};

export type PermissionObject = {
    id: string;
    actions: Array<(string)>;
};

export type RoleValueDto = {
    uuid: string;
    permissions: Array<PermissionObject>;
};

export type UpdateRolesBulkDto = {
    roles: Array<RoleValueDto>;
};

export type RoleCount = {
    /**
     * The count of the roles
     */
    count: number;
};

export type CreateFileDto = {
    name: string;
    mimeType: 'application/pdf' | 'application/msword' | 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' | 'application/vnd.ms-powerpoint' | 'application/vnd.openxmlformats-officedocument.presentationml.presentation' | 'text/plain' | 'text/html' | 'image/jpeg' | 'image/png' | 'image/tiff' | 'image/bmp' | 'image/heic' | 'image/webp' | 'image/gif';
};

export enum mimeType {
    APPLICATION_PDF = 'application/pdf',
    APPLICATION_MSWORD = 'application/msword',
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    APPLICATION_VND_MS_POWERPOINT = 'application/vnd.ms-powerpoint',
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION = 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    TEXT_PLAIN = 'text/plain',
    TEXT_HTML = 'text/html',
    IMAGE_JPEG = 'image/jpeg',
    IMAGE_PNG = 'image/png',
    IMAGE_TIFF = 'image/tiff',
    IMAGE_BMP = 'image/bmp',
    IMAGE_HEIC = 'image/heic',
    IMAGE_WEBP = 'image/webp',
    IMAGE_GIF = 'image/gif'
}

export type CreateFileResponse = {
    uuid: string;
    name: string;
    mimeType: ('application/pdf' | 'application/msword' | 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' | 'application/vnd.ms-powerpoint' | 'application/vnd.openxmlformats-officedocument.presentationml.presentation' | 'text/plain' | 'text/html' | 'image/jpeg' | 'image/png' | 'image/tiff' | 'image/bmp' | 'image/heic' | 'image/webp' | 'image/gif') | null;
    uploadUrl: string;
};

export type ChangeUserRoleControllerUpdateUserData = {
    body: ChangeUserRoleCommand;
    path: {
        user: string;
    };
};

export type ChangeUserRoleControllerUpdateUserResponse = (unknown);

export type ChangeUserRoleControllerUpdateUserError = unknown;

export type ViewUserControllerViewUserData = {
    path: {
        user: string;
    };
};

export type ViewUserControllerViewUserResponse = (ViewUserResponse);

export type ViewUserControllerViewUserError = unknown;

export type ViewUsersControllerViewUserData = {
    query: {
        limit: number;
        offset: number;
        permissions?: Array<('admin' | 'read_only' | 'user.read' | 'user.create' | 'user.update' | 'user.delete' | 'role.read' | 'role.create' | 'role.update' | 'role.delete')>;
        search?: string;
    };
};

export type ViewUsersControllerViewUserResponse = (ViewUsersResponse);

export type ViewUsersControllerViewUserError = unknown;

export type RoleControllerGetRolesResponse = (Array<RoleTransformerType>);

export type RoleControllerGetRolesError = unknown;

export type RoleControllerCreateRoleData = {
    body: CreateRoleDto;
};

export type RoleControllerCreateRoleResponse = (RoleTransformerType);

export type RoleControllerCreateRoleError = unknown;

export type RoleControllerUpdateRolesBulkData = {
    body: UpdateRolesBulkDto;
};

export type RoleControllerUpdateRolesBulkResponse = (Array<RoleTransformerType>);

export type RoleControllerUpdateRolesBulkError = unknown;

export type RoleControllerGetRoleData = {
    path: {
        role: string;
    };
};

export type RoleControllerGetRoleResponse = (RoleTransformerType);

export type RoleControllerGetRoleError = unknown;

export type RoleControllerUpdateRoleData = {
    body: CreateRoleDto;
    path: {
        role: string;
    };
};

export type RoleControllerUpdateRoleResponse = (RoleTransformerType);

export type RoleControllerUpdateRoleError = unknown;

export type RoleControllerDeleteRoleData = {
    path: {
        role: string;
    };
};

export type RoleControllerDeleteRoleResponse = (unknown);

export type RoleControllerDeleteRoleError = unknown;

export type RoleControllerGetRoleCountData = {
    path: {
        role: string;
    };
};

export type RoleControllerGetRoleCountResponse = (RoleCount);

export type RoleControllerGetRoleCountError = unknown;

export type PermissionControllerGetPermissionsResponse = (unknown);

export type PermissionControllerGetPermissionsError = unknown;

export type TypesenseControllerMigrateData = {
    query?: {
        collections?: Array<('user')>;
        fresh?: boolean;
    };
};

export type TypesenseControllerMigrateResponse = (unknown);

export type TypesenseControllerMigrateError = unknown;

export type TypesenseControllerImportData = {
    query?: {
        collections?: Array<('user')>;
    };
};

export type TypesenseControllerImportResponse = (unknown);

export type TypesenseControllerImportError = unknown;

export type TypesenseControllerGetCollectionsResponse = (unknown);

export type TypesenseControllerGetCollectionsError = unknown;

export type FileControllerCreateFileData = {
    body: CreateFileDto;
};

export type FileControllerCreateFileResponse = (CreateFileResponse);

export type FileControllerCreateFileError = unknown;

export type FileControllerConfirmFileUploadData = {
    path: {
        file: string;
    };
};

export type FileControllerConfirmFileUploadResponse = (unknown);

export type FileControllerConfirmFileUploadError = unknown;

export type FileControllerDownloadFileData = {
    path: {
        file: string;
    };
};

export type FileControllerRemoveFileData = {
    path: {
        file: string;
    };
};

export type FileControllerRemoveFileResponse = (unknown);

export type FileControllerRemoveFileError = unknown;

export type StatusControllerGetApiStatusResponse = (unknown);

export type StatusControllerGetApiStatusError = unknown;

export type StatusControllerGetHealthStatusResponse = (unknown);

export type StatusControllerGetHealthStatusError = unknown;